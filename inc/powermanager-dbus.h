/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __SRC_POWERMANAGER_DBUS_H__
#define __SRC_POWERMANAGER_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.mkps.powermanager */

#define TYPE_POWERMANAGER (powermanager_get_type ())
#define POWERMANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_POWERMANAGER, Powermanager))
#define IS_POWERMANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_POWERMANAGER))
#define POWERMANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_POWERMANAGER, PowermanagerIface))

struct _Powermanager;
typedef struct _Powermanager Powermanager;
typedef struct _PowermanagerIface PowermanagerIface;

struct _PowermanagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_execute_command) (
    Powermanager *object,
    GDBusMethodInvocation *invocation,
    gint arg_opcode);

};

GType powermanager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *powermanager_interface_info (void);
guint powermanager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void powermanager_complete_execute_command (
    Powermanager *object,
    GDBusMethodInvocation *invocation,
    gint status);



/* D-Bus method calls: */
void powermanager_call_execute_command (
    Powermanager *proxy,
    gint arg_opcode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean powermanager_call_execute_command_finish (
    Powermanager *proxy,
    gint *out_status,
    GAsyncResult *res,
    GError **error);

gboolean powermanager_call_execute_command_sync (
    Powermanager *proxy,
    gint arg_opcode,
    gint *out_status,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_POWERMANAGER_PROXY (powermanager_proxy_get_type ())
#define POWERMANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_POWERMANAGER_PROXY, PowermanagerProxy))
#define POWERMANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_POWERMANAGER_PROXY, PowermanagerProxyClass))
#define POWERMANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_POWERMANAGER_PROXY, PowermanagerProxyClass))
#define IS_POWERMANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_POWERMANAGER_PROXY))
#define IS_POWERMANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_POWERMANAGER_PROXY))

typedef struct _PowermanagerProxy PowermanagerProxy;
typedef struct _PowermanagerProxyClass PowermanagerProxyClass;
typedef struct _PowermanagerProxyPrivate PowermanagerProxyPrivate;

struct _PowermanagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  PowermanagerProxyPrivate *priv;
};

struct _PowermanagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType powermanager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PowermanagerProxy, g_object_unref)
#endif

void powermanager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Powermanager *powermanager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Powermanager *powermanager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void powermanager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Powermanager *powermanager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Powermanager *powermanager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_POWERMANAGER_SKELETON (powermanager_skeleton_get_type ())
#define POWERMANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_POWERMANAGER_SKELETON, PowermanagerSkeleton))
#define POWERMANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_POWERMANAGER_SKELETON, PowermanagerSkeletonClass))
#define POWERMANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_POWERMANAGER_SKELETON, PowermanagerSkeletonClass))
#define IS_POWERMANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_POWERMANAGER_SKELETON))
#define IS_POWERMANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_POWERMANAGER_SKELETON))

typedef struct _PowermanagerSkeleton PowermanagerSkeleton;
typedef struct _PowermanagerSkeletonClass PowermanagerSkeletonClass;
typedef struct _PowermanagerSkeletonPrivate PowermanagerSkeletonPrivate;

struct _PowermanagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  PowermanagerSkeletonPrivate *priv;
};

struct _PowermanagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType powermanager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PowermanagerSkeleton, g_object_unref)
#endif

Powermanager *powermanager_skeleton_new (void);


G_END_DECLS

#endif /* __SRC_POWERMANAGER_DBUS_H__ */
